"use strict";(self.webpackChunkaelf_dev_2402=self.webpackChunkaelf_dev_2402||[]).push([[6804],{2041:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=o(4848),r=o(8453);const a={sidebar_position:2},s="Code your contract",c={id:"smart-contract/3.2 Code-Your-Contract",title:"Code your contract",description:"Depending on your use case, you can modify the states, contract logics and interfaces to incorporate your specific domain code.",source:"@site/docs/3. smart-contract/3.2 Code-Your-Contract.md",sourceDirName:"3. smart-contract",slug:"/smart-contract/3.2 Code-Your-Contract",permalink:"/aelf-dev-2402/docs/smart-contract/3.2 Code-Your-Contract",draft:!1,unlisted:!1,editUrl:"https://github.com/kokkoon/aelf-dev-2402/tree/main/docs/3. smart-contract/3.2 Code-Your-Contract.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Start a .NET project for smart contract",permalink:"/aelf-dev-2402/docs/smart-contract/3.1 Getting-Started"},next:{title:"Unit test your contract",permalink:"/aelf-dev-2402/docs/smart-contract/3.3 Unit-Test-Your-Contract"}},i={},l=[{value:"1. Edit files",id:"1-edit-files",level:2},{value:"1.1. Edit file <code>src/Protobuf/contract/hello_world_contract.proto</code> and copy/paste the following:",id:"11-edit-file-srcprotobufcontracthello_world_contractproto-and-copypaste-the-following",level:3},{value:"1.2. Edit file <code>src/HelloWorldState.cs</code> and copy/paste the following:",id:"12-edit-file-srchelloworldstatecs-and-copypaste-the-following",level:3},{value:"1.3. Edit file <code>src/HelloWorld.cs</code> and copy/paste the following:",id:"13-edit-file-srchelloworldcs-and-copypaste-the-following",level:3},{value:"2. Add files",id:"2-add-files",level:2},{value:"2.1. Create a new file <code>src/Protobuf/base/acs1.proto</code> and copy/paste the following:",id:"21-create-a-new-file-srcprotobufbaseacs1proto-and-copypaste-the-following",level:3},{value:"2.2. Create a new file <code>src/Protobuf/reference/acs6.proto</code> and copy/paste the following:",id:"22-create-a-new-file-srcprotobufreferenceacs6proto-and-copypaste-the-following",level:3},{value:"2.3. Create a new file <code>src/Protobuf/reference/acs12.proto</code> and copy/paste the following:",id:"23-create-a-new-file-srcprotobufreferenceacs12proto-and-copypaste-the-following",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"code-your-contract",children:"Code your contract"}),"\n",(0,n.jsx)(t.p,{children:"Depending on your use case, you can modify the states, contract logics and interfaces to incorporate your specific domain code."}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["The code in this example can be cloned from: ",(0,n.jsx)(t.a,{href:"https://github.com/gldeng/aelf-nus-workshop-2024-example-code/tree/main/contract",children:"https://github.com/gldeng/aelf-nus-workshop-2024-example-code/tree/main/contract"}),"."]})}),"\n",(0,n.jsx)(t.h2,{id:"1-edit-files",children:"1. Edit files"}),"\n",(0,n.jsxs)(t.h3,{id:"11-edit-file-srcprotobufcontracthello_world_contractproto-and-copypaste-the-following",children:["1.1. Edit file ",(0,n.jsx)(t.code,{children:"src/Protobuf/contract/hello_world_contract.proto"})," and copy/paste the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-protobuf",metastring:'title="src/Protobuf/contract/hello_world_contract.proto" showLineNumbers',children:'syntax = "proto3";\n\n// highlight-next-line\nimport "aelf/core.proto";\nimport "aelf/options.proto";\nimport "google/protobuf/empty.proto";\nimport "google/protobuf/wrappers.proto";\n// highlight-next-line\nimport "Protobuf/reference/acs12.proto";\n// Define the namespace of this class.\noption csharp_namespace = "AElf.Contracts.HelloWorld";\n\n// highlight-start\nservice HelloWorld {\n    // Declare a state class, need to create a corresponding state class file.\n    option (aelf.csharp_state) = "AElf.Contracts.HelloWorld.HelloWorldState";\n    option (aelf.base) = "Protobuf/reference/acs12.proto";\n\n    // Actions\n    // Define methods name and input/output.\n    rpc Initialize (google.protobuf.Empty) returns (google.protobuf.Empty);\n    rpc CreateCharacter (google.protobuf.Empty) returns (Character);\n\n    // Views\n    rpc GetMyCharacter (aelf.Address) returns (Character) {\n        option (aelf.is_view) = true;\n    }\n}\n\nmessage Character {\n    int32 health = 1;\n    int32 strength = 2;\n    int32 speed = 3;\n}\n// highlight-end\n'})}),"\n",(0,n.jsxs)(t.h3,{id:"12-edit-file-srchelloworldstatecs-and-copypaste-the-following",children:["1.2. Edit file ",(0,n.jsx)(t.code,{children:"src/HelloWorldState.cs"})," and copy/paste the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="src/HelloWorldState.cs" showLineNumbers',children:"// highlight-next-line\nusing System.Diagnostics.CodeAnalysis;\nusing AElf.Sdk.CSharp.State;\n\n// highlight-start\nusing AElf.Standards.ACS6;\nusing AElf.Types;\n// highlight-end\n\n// highlight-start\nnamespace AElf.Contracts.HelloWorld\n{\n    // The state class is used to communicate with the blockchain.\n    public class HelloWorldState : ContractState\n    {\n        //create a storage space for Character\n        public BoolState Initialized { get; set; }\n        public MappedState<Address, Character> Characters { get; set; }\n\n        //encapsulate AEDPoS consensus contract reference state\n        internal RandomNumberProvideacsrContractContainer.RandomNumberProvideacsrContractReferenceState\n            RandomNumberContract { get; set; }\n    }\n}\n// highlight-end\n"})}),"\n",(0,n.jsxs)(t.h3,{id:"13-edit-file-srchelloworldcs-and-copypaste-the-following",children:["1.3. Edit file ",(0,n.jsx)(t.code,{children:"src/HelloWorld.cs"})," and copy/paste the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",metastring:'title="src/HelloWorld.cs" showLineNumbers',children:'using AElf.Sdk.CSharp;\n// highlight-next-line\nusing AElf.Types;\nusing Google.Protobuf.WellKnownTypes;\n\n// highlight-start\nnamespace AElf.Contracts.HelloWorld\n{\n    // Contract class must inherit the class generated by the proto file\n    public class HelloWorld : HelloWorldContainer.HelloWorldBase\n    {\n        // adding this line is for preparing the contract deployment later,\n        // to differentiate each person\'s contract.\n        // This is because our testnet does not allow the deployment of two identical contracts.\n        const string author = "your name";\n\n        public override Empty Initialize(Empty input)\n        {\n            Assert(!State.Initialized.Value, "already initialized");\n            State.RandomNumberContract.Value =\n                Context.GetContractAddressByName(SmartContractConstants.ConsensusContractSystemName);\n            return new Empty();\n        }\n\n        public override Character CreateCharacter(Empty input)\n        {\n            var randomBytes = State.RandomNumberContract.GetRandomBytes\n                .Call(new Int64Value { Value = Context.CurrentHeight - 1 }.ToBytesValue()).Value.ToByteArray();\n            var hash = HashHelper.ComputeFrom(Context.Sender).Value.ToByteArray();\n\n            var character = new Character\n            {\n                Health = 60 + (randomBytes[2] ^ hash[2]) % 41, // Health is 60 ~ 100\n                Strength = 40 + (randomBytes[3] ^ hash[3]) % 61, // Strength is 40 ~ 100\n                Speed = 100 + (randomBytes[4] ^ hash[4]) % 101 // Speed is 100 ~ 200\n            };\n            State.Characters[Context.Sender] = character;\n            return character;\n        }\n\n        public override Character GetMyCharacter(Address input)\n        {\n            return State.Characters[input] ?? new Character();\n        }\n    }\n}\n// highlight-end\n'})}),"\n",(0,n.jsx)(t.h2,{id:"2-add-files",children:"2. Add files"}),"\n",(0,n.jsxs)(t.h3,{id:"21-create-a-new-file-srcprotobufbaseacs1proto-and-copypaste-the-following",children:["2.1. Create a new file ",(0,n.jsx)(t.code,{children:"src/Protobuf/base/acs1.proto"})," and copy/paste the following:"]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["For more information on ACS1, refer to ",(0,n.jsx)(t.a,{href:"https://docs.aelf.io/en/latest/reference/acs/acs1.html",children:"https://docs.aelf.io/en/latest/reference/acs/acs1.html"})]})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-protobuf",metastring:'title="src/Protobuf/base/acs1.proto" showLineNumbers',children:'/**\n * AElf Standards ACS1(Transaction Fee Standard)\n *\n * Used to manage the transaction fee.\n */\nsyntax = "proto3";\n\npackage acs1;\n\nimport public "aelf/options.proto";\nimport public "google/protobuf/empty.proto";\nimport public "google/protobuf/wrappers.proto";\nimport "aelf/core.proto";\nimport "Protobuf/message/authority_info.proto";\n\noption (aelf.identity) = "acs1";\noption csharp_namespace = "AElf.Standards.ACS1";\n\nservice MethodFeeProviderContract {\n\n    // Set the method fees for the specified method. Note that this will override all fees of the method.\n    rpc SetMethodFee (MethodFees) returns (google.protobuf.Empty) {\n    }\n\n    // Change the method fee controller, the default is parliament and default organization.\n    rpc ChangeMethodFeeController (AuthorityInfo) returns (google.protobuf.Empty) {\n    }\n\n    // Query method fee information by method name.\n    rpc GetMethodFee (google.protobuf.StringValue) returns (MethodFees) {\n        option (aelf.is_view) = true;\n    }\n\n    // Query the method fee controller.\n    rpc GetMethodFeeController (google.protobuf.Empty) returns (AuthorityInfo) {\n        option (aelf.is_view) = true;\n    }\n}\n\nmessage MethodFees {\n    // The name of the method to be charged.\n    string method_name = 1;\n    // List of fees to be charged.\n    repeated MethodFee fees = 2;\n    bool is_size_fee_free = 3;// Optional based on the implementation of SetMethodFee method.\n}\n\nmessage MethodFee {\n    // The token symbol of the method fee.\n    string symbol = 1;\n    // The amount of fees to be charged.\n    int64 basic_fee = 2;\n}\n'})}),"\n",(0,n.jsxs)(t.h3,{id:"22-create-a-new-file-srcprotobufreferenceacs6proto-and-copypaste-the-following",children:["2.2. Create a new file ",(0,n.jsx)(t.code,{children:"src/Protobuf/reference/acs6.proto"})," and copy/paste the following:"]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["For more information on ACS6, refer to ",(0,n.jsx)(t.a,{href:"https://docs.aelf.io/en/latest/reference/acs/acs6.html",children:"https://docs.aelf.io/en/latest/reference/acs/acs6.html"})]})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-protobuf",metastring:'title="src/Protobuf/reference/acs6.proto" showLineNumbers',children:'syntax = "proto3";\n\npackage acs6;\n\nimport "aelf/options.proto";\nimport "aelf/core.proto";\nimport "google/protobuf/wrappers.proto";\n\noption (aelf.identity) = "acs6";\noption csharp_namespace = "AElf.Standards.ACS6";\n\nservice RandomNumberProvideacsrContract {\n    rpc GetRandomBytes (google.protobuf.BytesValue) returns (google.protobuf.BytesValue) {\n        option (aelf.is_view) = true;\n    }\n}\n\n// Events\n\nmessage RandomBytesGenerated {\n    option (aelf.is_event) = true;\n    bytes argument = 1;\n    bytes random_bytes = 2;\n}\n'})}),"\n",(0,n.jsxs)(t.h3,{id:"23-create-a-new-file-srcprotobufreferenceacs12proto-and-copypaste-the-following",children:["2.3. Create a new file ",(0,n.jsx)(t.code,{children:"src/Protobuf/reference/acs12.proto"})," and copy/paste the following:"]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["For more information on ACS12, refer to ",(0,n.jsx)(t.a,{href:"https://docs.aelf.io/en/latest/reference/acs/acs12.html",children:"https://docs.aelf.io/en/latest/reference/acs/acs12.html"})]})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-protobuf",metastring:'title="src/Protobuf/reference/acs12.proto" showLineNumbers',children:'/**\n * AElf Standards ACS12(User Contract Standard)\n *\n * Used to manage user contract.\n */\nsyntax = "proto3";\n\npackage acs12;\n\nimport public "aelf/options.proto";\nimport public "google/protobuf/empty.proto";\nimport public "google/protobuf/wrappers.proto";\nimport "aelf/core.proto";\n\noption (aelf.identity) = "acs12";\noption csharp_namespace = "AElf.Standards.ACS12";\n\nservice UserContract{\n\n}\n\n//Specified method fee for user contract.\nmessage UserContractMethodFees {\n    // List of fees to be charged.\n    repeated UserContractMethodFee fees = 2;\n    // Optional based on the implementation of SetConfiguration method.\n    bool is_size_fee_free = 3;\n}\n\nmessage UserContractMethodFee {\n    // The token symbol of the method fee.\n    string symbol = 1;\n    // The amount of fees to be charged.\n    int64 basic_fee = 2;\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>c});var n=o(6540);const r={},a=n.createContext(r);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);