"use strict";(self.webpackChunkaelf_dev_2402=self.webpackChunkaelf_dev_2402||[]).push([[8109],{4220:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(4848),r=n(8453);const o={sidebar_position:4},s="Smart contract",i={id:"smart-contract/index",title:"Smart contract",description:"Introduction",source:"@site/docs/3. smart-contract/index.md",sourceDirName:"3. smart-contract",slug:"/smart-contract/",permalink:"/aelf-dev-2402/docs/smart-contract/",draft:!1,unlisted:!1,editUrl:"https://github.com/kokkoon/aelf-dev-2402/tree/main/docs/3. smart-contract/index.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Create NFT collection on Forest",permalink:"/aelf-dev-2402/docs/create-token/2.3 forest/"},next:{title:"Start a .NET project for smart contract",permalink:"/aelf-dev-2402/docs/smart-contract/3.1 Getting-Started"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"What makes a smart contract?",id:"what-makes-a-smart-contract",level:2},{value:"The state",id:"the-state",level:3},{value:"Writing to the State",id:"writing-to-the-state",level:3},{value:"Reading the State",id:"reading-the-state",level:3},{value:"The Interface",id:"the-interface",level:3}];function d(t){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"smart-contract",children:"Smart contract"}),"\n",(0,a.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(e.p,{children:"The core of blockchain platforms can be viewed as a distributed multi-tenant database that stores the status of all the smart contracts deployed on it. Once deployed, each smart contract will have its unique address. The address will be used to query the execution status of the contract and can work as an identifier for status queries and updates. The contract code defines the details of these and updates, to be specific, how to check whether an account has permission to operate them and how the operation is completed."}),"\n",(0,a.jsx)(e.h2,{id:"what-makes-a-smart-contract",children:"What makes a smart contract?"}),"\n",(0,a.jsx)(e.h3,{id:"the-state",children:"The state"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-CSharp",children:"public class SimpleContractState : AElf.Sdk.CSharp.State.ContractState \n{\n    // A state that holds string value\n    public StringState Message { get; set; }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"writing-to-the-state",children:"Writing to the State"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-CSharp",children:"public override Empty Update(StringValue input)\n{\n    // Set the message value in the contract state\n    State.Message.Value = input.Value;\n    // Emit an event to notify listeners about something happened during the execution of this method\n    Context.Fire(new UpdatedMessage\n    {\n        Value = input.Value\n    });\n    return new Empty();\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"reading-the-state",children:"Reading the State"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-CSharp",children:"public override StringValue Read(Empty input)\n{\n    // Retrieve the value from the state\n    var value = State.Message.Value;\n    // Wrap the value in the return type\n    return new StringValue\n    {\n        Value = value\n    };\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"the-interface",children:"The Interface"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-protobuf",children:'syntax = "proto3";\n\nimport "aelf/options.proto";\nimport "google/protobuf/empty.proto";\nimport "google/protobuf/wrappers.proto";\n// The namespace of this class\noption csharp_namespace = "AElf.Contracts.SimpleContract";\n\nservice SimpleContract {\n  // The name of the state class the smart contract is going to use to access blockchain state\n  option (aelf.csharp_state) = "AElf.Contracts.SimpleContract.SimpleContractState";\n\n  // Actions (methods that modify contract state)\n  // Stores the value in contract state\n  rpc Update (google.protobuf.StringValue) returns (google.protobuf.Empty) {\n  }\n\n  // Views (methods that don\'t modify contract state)\n  // Get the value stored from contract state\n  rpc Read (google.protobuf.Empty) returns (google.protobuf.StringValue) {\n    option (aelf.is_view) = true;\n  }\n}\n\n// An event that will be emitted from contract method call\nmessage UpdatedMessage {\n  option (aelf.is_event) = true;\n  string value = 1;\n}\n'})})]})}function h(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(d,{...t})}):d(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>i});var a=n(6540);const r={},o=a.createContext(r);function s(t){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),a.createElement(o.Provider,{value:e},t.children)}}}]);